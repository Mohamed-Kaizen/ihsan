{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83d\udee0 Status: In Development Ihsan is currently in development. So we encourage you to use it and give us your feedback, but there are things that haven't been finalized yet and you can expect some changes. See the list of Known Issues and TODOs, below, for updates. Overview Behold Ihsan Project Installation Poetry $ poetry add ihsan ---> 100% Pip $ pip install poetry add ihsan ---> 100%","title":"Home"},{"location":"#status-in-development","text":"Ihsan is currently in development. So we encourage you to use it and give us your feedback, but there are things that haven't been finalized yet and you can expect some changes. See the list of Known Issues and TODOs, below, for updates.","title":"\ud83d\udee0 Status: In Development"},{"location":"#overview","text":"Behold Ihsan Project","title":"Overview"},{"location":"#installation","text":"Poetry $ poetry add ihsan ---> 100% Pip $ pip install poetry add ihsan ---> 100%","title":"Installation"},{"location":"reference/manage/","text":"Command-line interface. sdl ( file , output =< typer . models . OptionInfo object at 0x7fea923ffb20 > , folder =< typer . models . OptionInfo object at 0x7fea923ffb80 > ) Generate SDL aka GraphQL schema from ADFH file. Parameters: Name Type Description Default file str Path to ADFH file. required output str If --output is used, it will save it in file. <typer.models.OptionInfo object at 0x7fea923ffb20> folder bool If --output and --folder is used, it will open the saved file. <typer.models.OptionInfo object at 0x7fea923ffb80> Source code in ihsan/manage.py @app . command ( \"sdl\" ) def sdl ( file : str , output : str = typer . Option ( None , help = \"save output into a file.\" ), folder : bool = typer . Option ( False , help = \"Will open the out file folder.\" ), ) -> None : \"\"\"Generate SDL aka GraphQL schema from ADFH file. Args: file: Path to ADFH file. output: If --output is used, it will save it in file. folder: If --output and --folder is used, it will open the saved file. \"\"\" console = Console () data , is_error = read_adfh_file ( file = file ) if is_error : console . print ( data , style = \"bold red\" ) else : ihsan_type = IhsanType ( ** data ) sdl_output = to_sdl ( schema = ihsan_type ) if output : typer . confirm ( f \"The output will be saved in { output } , are you sure?\" , abort = True ) with open ( output , \"w\" ) as output_file : output_file . write ( sdl_output ) else : console . print ( sdl_output , style = \"bold green\" ) console . print ( \"Use -> https://app.graphqleditor.com/ to test the schema :)\" , style = \"bold blue\" , ) version () Show project Version. Source code in ihsan/manage.py @app . command () def version () -> None : \"\"\"Show project Version.\"\"\" console = Console () project_name = \"Ihsan\" console . print ( f \" { project_name } Version: { __version__ } \" , style = \"bold green\" )","title":"Manage"},{"location":"reference/manage/#ihsan.manage","text":"Command-line interface.","title":"ihsan.manage"},{"location":"reference/manage/#ihsan.manage.sdl","text":"Generate SDL aka GraphQL schema from ADFH file. Parameters: Name Type Description Default file str Path to ADFH file. required output str If --output is used, it will save it in file. <typer.models.OptionInfo object at 0x7fea923ffb20> folder bool If --output and --folder is used, it will open the saved file. <typer.models.OptionInfo object at 0x7fea923ffb80> Source code in ihsan/manage.py @app . command ( \"sdl\" ) def sdl ( file : str , output : str = typer . Option ( None , help = \"save output into a file.\" ), folder : bool = typer . Option ( False , help = \"Will open the out file folder.\" ), ) -> None : \"\"\"Generate SDL aka GraphQL schema from ADFH file. Args: file: Path to ADFH file. output: If --output is used, it will save it in file. folder: If --output and --folder is used, it will open the saved file. \"\"\" console = Console () data , is_error = read_adfh_file ( file = file ) if is_error : console . print ( data , style = \"bold red\" ) else : ihsan_type = IhsanType ( ** data ) sdl_output = to_sdl ( schema = ihsan_type ) if output : typer . confirm ( f \"The output will be saved in { output } , are you sure?\" , abort = True ) with open ( output , \"w\" ) as output_file : output_file . write ( sdl_output ) else : console . print ( sdl_output , style = \"bold green\" ) console . print ( \"Use -> https://app.graphqleditor.com/ to test the schema :)\" , style = \"bold blue\" , )","title":"sdl()"},{"location":"reference/manage/#ihsan.manage.version","text":"Show project Version. Source code in ihsan/manage.py @app . command () def version () -> None : \"\"\"Show project Version.\"\"\" console = Console () project_name = \"Ihsan\" console . print ( f \" { project_name } Version: { __version__ } \" , style = \"bold green\" )","title":"version()"},{"location":"reference/schema/","text":"Collection of schemas. ADFHActionsInputType pydantic-model Schema for ADFH action input. ADFHActionsType pydantic-model Schema for ADFH action. ADFHExtraType pydantic-model Schema for ADFH extra. ADFHFieldsType pydantic-model Schema for ADFH fields. ADFHModelsPropertiesType pydantic-model Schema for ADFH models properties. ADFHModelsType pydantic-model Schema for ADFH models. ADFHType pydantic-model Schema for ADFH. IhsanType pydantic-model Schema for Ihsan.","title":"Schema"},{"location":"reference/schema/#ihsan.schema","text":"Collection of schemas.","title":"ihsan.schema"},{"location":"reference/schema/#ihsan.schema.ADFHActionsInputType","text":"Schema for ADFH action input.","title":"ADFHActionsInputType"},{"location":"reference/schema/#ihsan.schema.ADFHActionsType","text":"Schema for ADFH action.","title":"ADFHActionsType"},{"location":"reference/schema/#ihsan.schema.ADFHExtraType","text":"Schema for ADFH extra.","title":"ADFHExtraType"},{"location":"reference/schema/#ihsan.schema.ADFHFieldsType","text":"Schema for ADFH fields.","title":"ADFHFieldsType"},{"location":"reference/schema/#ihsan.schema.ADFHModelsPropertiesType","text":"Schema for ADFH models properties.","title":"ADFHModelsPropertiesType"},{"location":"reference/schema/#ihsan.schema.ADFHModelsType","text":"Schema for ADFH models.","title":"ADFHModelsType"},{"location":"reference/schema/#ihsan.schema.ADFHType","text":"Schema for ADFH.","title":"ADFHType"},{"location":"reference/schema/#ihsan.schema.IhsanType","text":"Schema for Ihsan.","title":"IhsanType"},{"location":"reference/translation/","text":"Translator module where it change ADFH into json, SDL, openAPI, etc... to_sdl ( schema , indention = 4 ) Function that transfer ADFH into SDL aka GraphQL schema. Parameters: Name Type Description Default schema IhsanType IhsanType model. required indention int The indention of the generated SDL. 4 Returns: Type Description str SDL aka Graphql schema. Source code in ihsan/translation.py def to_sdl ( schema : IhsanType , indention : int = 4 ) -> str : \"\"\"Function that transfer ADFH into SDL aka GraphQL schema. Args: schema: IhsanType model. indention: The indention of the generated SDL. Returns: SDL aka Graphql schema. \"\"\" show_me_list = find_action ( schema . adfh . actions , \"show me list\" ) let_me_remove = find_action ( schema . adfh . actions , \"let me remove\" ) let_me_add = find_action ( schema . adfh . actions , \"let me add\" ) text = \"\" for model in schema . adfh . models : text += f \"type { model . name } { '{' } \\n \" for pro in model . properties : pro = find_field ( schema . adfh . fields_list , pro . assign ) placeholder = f \" { pro . name } : { pro . type }{ pro . mandatory } \\n \" text += placeholder . rjust ( len ( placeholder ) + indention ) text += \"} \\n \" text += \"type Query { \\n \" for item in show_me_list : model = find_model ( schema . adfh . models , item . get ( \"model\" )) placeholder = f \" { item . get ( 'name' ) } : [ { model . name } ] \\n \" text += placeholder . rjust ( len ( placeholder ) + indention ) text += \"} \\n \" text += \"type Mutation { \\n \" for item in let_me_add : placeholder = f \" { item . get ( 'name' ) } (\" text += placeholder . rjust ( len ( placeholder ) + indention ) for input_action in item . get ( \"input\" ): input_action = find_field ( schema . adfh . fields_list , input_action . get ( \"assign\" ) ) text += ( f \" { input_action . name } : { input_action . type }{ input_action . mandatory } , \" ) model = find_model ( schema . adfh . models , item . get ( \"model\" )) text += f \"): { model . name } \\n \" for item in let_me_remove : placeholder = f \" { item . get ( 'name' ) } (\" text += placeholder . rjust ( len ( placeholder ) + indention ) field = find_field ( schema . adfh . fields_list , item . get ( \"subject\" )) text += f \" { field . name } : { field . type }{ field . mandatory } , \" model = find_model ( schema . adfh . models , item . get ( \"model\" )) text += f \"): { model . name } \\n \" text += \"} \\n \" text += \"\"\"schema { query: Query, mutation: Mutation } \"\"\" return text","title":"Translation"},{"location":"reference/translation/#ihsan.translation","text":"Translator module where it change ADFH into json, SDL, openAPI, etc...","title":"ihsan.translation"},{"location":"reference/translation/#ihsan.translation.to_sdl","text":"Function that transfer ADFH into SDL aka GraphQL schema. Parameters: Name Type Description Default schema IhsanType IhsanType model. required indention int The indention of the generated SDL. 4 Returns: Type Description str SDL aka Graphql schema. Source code in ihsan/translation.py def to_sdl ( schema : IhsanType , indention : int = 4 ) -> str : \"\"\"Function that transfer ADFH into SDL aka GraphQL schema. Args: schema: IhsanType model. indention: The indention of the generated SDL. Returns: SDL aka Graphql schema. \"\"\" show_me_list = find_action ( schema . adfh . actions , \"show me list\" ) let_me_remove = find_action ( schema . adfh . actions , \"let me remove\" ) let_me_add = find_action ( schema . adfh . actions , \"let me add\" ) text = \"\" for model in schema . adfh . models : text += f \"type { model . name } { '{' } \\n \" for pro in model . properties : pro = find_field ( schema . adfh . fields_list , pro . assign ) placeholder = f \" { pro . name } : { pro . type }{ pro . mandatory } \\n \" text += placeholder . rjust ( len ( placeholder ) + indention ) text += \"} \\n \" text += \"type Query { \\n \" for item in show_me_list : model = find_model ( schema . adfh . models , item . get ( \"model\" )) placeholder = f \" { item . get ( 'name' ) } : [ { model . name } ] \\n \" text += placeholder . rjust ( len ( placeholder ) + indention ) text += \"} \\n \" text += \"type Mutation { \\n \" for item in let_me_add : placeholder = f \" { item . get ( 'name' ) } (\" text += placeholder . rjust ( len ( placeholder ) + indention ) for input_action in item . get ( \"input\" ): input_action = find_field ( schema . adfh . fields_list , input_action . get ( \"assign\" ) ) text += ( f \" { input_action . name } : { input_action . type }{ input_action . mandatory } , \" ) model = find_model ( schema . adfh . models , item . get ( \"model\" )) text += f \"): { model . name } \\n \" for item in let_me_remove : placeholder = f \" { item . get ( 'name' ) } (\" text += placeholder . rjust ( len ( placeholder ) + indention ) field = find_field ( schema . adfh . fields_list , item . get ( \"subject\" )) text += f \" { field . name } : { field . type }{ field . mandatory } , \" model = find_model ( schema . adfh . models , item . get ( \"model\" )) text += f \"): { model . name } \\n \" text += \"} \\n \" text += \"\"\"schema { query: Query, mutation: Mutation } \"\"\" return text","title":"to_sdl()"},{"location":"reference/utils/","text":"Collection of utils. find_action ( actions , keyword ) Search for a certain action. Parameters: Name Type Description Default actions List[ihsan.schema.ADFHActionsType] List of ADFHActionsType model. required keyword str word or the action that has been required. required Returns: Type Description List[Dict[str, Any]] List of selected actions. Source code in ihsan/utils.py def find_action ( actions : List [ ADFHActionsType ], keyword : str ) -> List [ Dict [ str , Any ]]: \"\"\"Search for a certain action. Args: actions: List of ADFHActionsType model. keyword: word or the action that has been required. Returns: List of selected actions. \"\"\" return [ action . dict () for action in actions if action . type == keyword ] find_field ( fields , field_id ) Search for a certain field. Parameters: Name Type Description Default fields List[ihsan.schema.ADFHFieldsType] List of ADFHFieldsType model. required field_id str The id of the field. required Returns: Type Description Union[ihsan.schema.ADFHFieldsType, str] ADFHFieldsType model. Source code in ihsan/utils.py def find_field ( fields : List [ ADFHFieldsType ], field_id : str ) -> Union [ ADFHFieldsType , str ]: \"\"\"Search for a certain field. Args: fields: List of ADFHFieldsType model. field_id: The id of the field. Returns: ADFHFieldsType model. \"\"\" field_dict = {} for field in fields : if field . id == field_id : data_type = sdl_data_type_converter ( field . type ) field_dict . update ( { \"id\" : field . id , \"name\" : field . name , \"type\" : data_type , \"mandatory\" : \"!\" if field . mandatory == \"yes\" else \"\" , } ) try : return ADFHFieldsType ( ** field_dict ) except ValidationError as error : return error . json () find_model ( models , model_id ) Search for a certain model. Parameters: Name Type Description Default models List[ihsan.schema.ADFHModelsType] List of ADFHModelsType model. required model_id str The id of the model. required Returns: Type Description Union[ihsan.schema.ADFHModelsType, str] ADFHModelsType model. Source code in ihsan/utils.py def find_model ( models : List [ ADFHModelsType ], model_id : str ) -> Union [ ADFHModelsType , str ]: \"\"\"Search for a certain model. Args: models: List of ADFHModelsType model. model_id: The id of the model. Returns: ADFHModelsType model. \"\"\" model_dict = {} for field in models : if field . id == model_id : model_dict . update ({ \"id\" : field . id , \"name\" : field . name }) try : return ADFHModelsType ( ** model_dict ) except ValidationError as error : return error . json () read_adfh_file ( file ) Parse an ADFH file into dict. Parameters: Name Type Description Default file str Path to ADFH file. required Returns: Type Description Tuple[Union[Dict, str], bool] Tuple either with the data or an error message. Source code in ihsan/utils.py def read_adfh_file ( file : str ) -> Tuple [ Union [ Dict , str ], bool ]: \"\"\"Parse an ADFH file into dict. Args: file: Path to ADFH file. Returns: Tuple either with the data or an error message. \"\"\" file_path = pathlib . Path ( file ) file_name , file_extension = file_path . name . rsplit ( \".\" ) if file_path . exists () and file_path . is_file (): if file_extension in [ \"yaml\" , \"yml\" ]: with open ( file_path , \"r\" ) as f : data = yaml . safe_load ( f ) return data , False elif file_extension == \"toml\" : data = toml . load ( f \" { file_path } \" ) return data , False else : return \"You can only pick toml or yaml file.\" , True return \"File doesn't exist.\" , True sdl_data_type_converter ( data ) Converting ADFH data type into sdl data type. Parameters: Name Type Description Default data str ADFH data type. required Examples: >>> from ihsan.utils import sdl_data_type_converter >>> unique_id = sdl_data_type_converter ( data = \"unique id\" ) >>> unique_id == \"String\" True >>> text = sdl_data_type_converter ( data = \"text\" ) >>> text == \"String\" True >>> checkbox = sdl_data_type_converter ( data = \"checkbox\" ) >>> checkbox == \"Boolean\" True >>> number = sdl_data_type_converter ( data = \"number\" ) >>> number == \"Int\" True Returns: Type Description str SDL data type. Source code in ihsan/utils.py def sdl_data_type_converter ( data : str ) -> str : \"\"\"Converting ADFH data type into sdl data type. Args: data: ADFH data type. Examples: >>> from ihsan.utils import sdl_data_type_converter >>> unique_id = sdl_data_type_converter(data=\"unique id\") >>> unique_id == \"String\" True >>> text = sdl_data_type_converter(data=\"text\") >>> text == \"String\" True >>> checkbox = sdl_data_type_converter(data=\"checkbox\") >>> checkbox == \"Boolean\" True >>> number = sdl_data_type_converter(data=\"number\") >>> number == \"Int\" True Returns: SDL data type. \"\"\" types = { \"unique id\" : \"String\" , \"text\" : \"String\" , \"checkbox\" : \"Boolean\" , \"number\" : \"Int\" , } return types . get ( data , \"String\" )","title":"Utils"},{"location":"reference/utils/#ihsan.utils","text":"Collection of utils.","title":"ihsan.utils"},{"location":"reference/utils/#ihsan.utils.find_action","text":"Search for a certain action. Parameters: Name Type Description Default actions List[ihsan.schema.ADFHActionsType] List of ADFHActionsType model. required keyword str word or the action that has been required. required Returns: Type Description List[Dict[str, Any]] List of selected actions. Source code in ihsan/utils.py def find_action ( actions : List [ ADFHActionsType ], keyword : str ) -> List [ Dict [ str , Any ]]: \"\"\"Search for a certain action. Args: actions: List of ADFHActionsType model. keyword: word or the action that has been required. Returns: List of selected actions. \"\"\" return [ action . dict () for action in actions if action . type == keyword ]","title":"find_action()"},{"location":"reference/utils/#ihsan.utils.find_field","text":"Search for a certain field. Parameters: Name Type Description Default fields List[ihsan.schema.ADFHFieldsType] List of ADFHFieldsType model. required field_id str The id of the field. required Returns: Type Description Union[ihsan.schema.ADFHFieldsType, str] ADFHFieldsType model. Source code in ihsan/utils.py def find_field ( fields : List [ ADFHFieldsType ], field_id : str ) -> Union [ ADFHFieldsType , str ]: \"\"\"Search for a certain field. Args: fields: List of ADFHFieldsType model. field_id: The id of the field. Returns: ADFHFieldsType model. \"\"\" field_dict = {} for field in fields : if field . id == field_id : data_type = sdl_data_type_converter ( field . type ) field_dict . update ( { \"id\" : field . id , \"name\" : field . name , \"type\" : data_type , \"mandatory\" : \"!\" if field . mandatory == \"yes\" else \"\" , } ) try : return ADFHFieldsType ( ** field_dict ) except ValidationError as error : return error . json ()","title":"find_field()"},{"location":"reference/utils/#ihsan.utils.find_model","text":"Search for a certain model. Parameters: Name Type Description Default models List[ihsan.schema.ADFHModelsType] List of ADFHModelsType model. required model_id str The id of the model. required Returns: Type Description Union[ihsan.schema.ADFHModelsType, str] ADFHModelsType model. Source code in ihsan/utils.py def find_model ( models : List [ ADFHModelsType ], model_id : str ) -> Union [ ADFHModelsType , str ]: \"\"\"Search for a certain model. Args: models: List of ADFHModelsType model. model_id: The id of the model. Returns: ADFHModelsType model. \"\"\" model_dict = {} for field in models : if field . id == model_id : model_dict . update ({ \"id\" : field . id , \"name\" : field . name }) try : return ADFHModelsType ( ** model_dict ) except ValidationError as error : return error . json ()","title":"find_model()"},{"location":"reference/utils/#ihsan.utils.read_adfh_file","text":"Parse an ADFH file into dict. Parameters: Name Type Description Default file str Path to ADFH file. required Returns: Type Description Tuple[Union[Dict, str], bool] Tuple either with the data or an error message. Source code in ihsan/utils.py def read_adfh_file ( file : str ) -> Tuple [ Union [ Dict , str ], bool ]: \"\"\"Parse an ADFH file into dict. Args: file: Path to ADFH file. Returns: Tuple either with the data or an error message. \"\"\" file_path = pathlib . Path ( file ) file_name , file_extension = file_path . name . rsplit ( \".\" ) if file_path . exists () and file_path . is_file (): if file_extension in [ \"yaml\" , \"yml\" ]: with open ( file_path , \"r\" ) as f : data = yaml . safe_load ( f ) return data , False elif file_extension == \"toml\" : data = toml . load ( f \" { file_path } \" ) return data , False else : return \"You can only pick toml or yaml file.\" , True return \"File doesn't exist.\" , True","title":"read_adfh_file()"},{"location":"reference/utils/#ihsan.utils.sdl_data_type_converter","text":"Converting ADFH data type into sdl data type. Parameters: Name Type Description Default data str ADFH data type. required Examples: >>> from ihsan.utils import sdl_data_type_converter >>> unique_id = sdl_data_type_converter ( data = \"unique id\" ) >>> unique_id == \"String\" True >>> text = sdl_data_type_converter ( data = \"text\" ) >>> text == \"String\" True >>> checkbox = sdl_data_type_converter ( data = \"checkbox\" ) >>> checkbox == \"Boolean\" True >>> number = sdl_data_type_converter ( data = \"number\" ) >>> number == \"Int\" True Returns: Type Description str SDL data type. Source code in ihsan/utils.py def sdl_data_type_converter ( data : str ) -> str : \"\"\"Converting ADFH data type into sdl data type. Args: data: ADFH data type. Examples: >>> from ihsan.utils import sdl_data_type_converter >>> unique_id = sdl_data_type_converter(data=\"unique id\") >>> unique_id == \"String\" True >>> text = sdl_data_type_converter(data=\"text\") >>> text == \"String\" True >>> checkbox = sdl_data_type_converter(data=\"checkbox\") >>> checkbox == \"Boolean\" True >>> number = sdl_data_type_converter(data=\"number\") >>> number == \"Int\" True Returns: SDL data type. \"\"\" types = { \"unique id\" : \"String\" , \"text\" : \"String\" , \"checkbox\" : \"Boolean\" , \"number\" : \"Int\" , } return types . get ( data , \"String\" )","title":"sdl_data_type_converter()"}]}