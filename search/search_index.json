{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83d\udee0 Status: In Development Ihsan is currently in development. So we encourage you to use it and give us your feedback, but there are things that haven't been finalized yet and you can expect some changes. See the list of Known Issues and TODOs, below, for updates. Overview Behold Ihsan Project Installation Poetry $ poetry add ihsan ---> 100% Pip $ pip install poetry add ihsan ---> 100%","title":"Home"},{"location":"#status-in-development","text":"Ihsan is currently in development. So we encourage you to use it and give us your feedback, but there are things that haven't been finalized yet and you can expect some changes. See the list of Known Issues and TODOs, below, for updates.","title":"\ud83d\udee0 Status: In Development"},{"location":"#overview","text":"Behold Ihsan Project","title":"Overview"},{"location":"#installation","text":"Poetry $ poetry add ihsan ---> 100% Pip $ pip install poetry add ihsan ---> 100%","title":"Installation"},{"location":"reference/manage/","text":"Command-line interface. sdl ( file , output =< typer . models . OptionInfo object at 0x7f00cf3a86d0 > ) Generate SDL aka GraphQL schema from ADFH file. Parameters: Name Type Description Default file str Path to ADFH file. required output str If --output is used, it will save it in file. <typer.models.OptionInfo object at 0x7f00cf3a86d0> Source code in ihsan/manage.py @app . command ( \"sdl\" ) def sdl ( file : str , output : str = typer . Option ( None , help = \"save output into a file.\" ), ) -> None : \"\"\"Generate SDL aka GraphQL schema from ADFH file. Args: file: Path to ADFH file. output: If --output is used, it will save it in file. \"\"\" console = Console () data = read_adfh_file ( file = file ) if type ( data ) == str : console . print ( data , style = \"bold red\" ) else : ihsan_type = IhsanType ( ** data ) # type: ignore sdl_output = to_sdl ( schema = ihsan_type ) if output : typer . confirm ( f \"The output will be saved in { output } , are you sure?\" , abort = True ) with open ( output , \"w\" ) as output_file : output_file . write ( sdl_output ) else : console . print ( sdl_output , style = \"bold green\" ) console . print ( \"Use -> https://app.graphqleditor.com/ to test the schema :)\" , style = \"bold blue\" , ) version () Show project Version. Source code in ihsan/manage.py @app . command () def version () -> None : \"\"\"Show project Version.\"\"\" console = Console () project_name = \"Ihsan\" console . print ( f \" { project_name } Version: { __version__ } \" , style = \"bold green\" )","title":"Manage"},{"location":"reference/manage/#ihsan.manage","text":"Command-line interface.","title":"ihsan.manage"},{"location":"reference/manage/#ihsan.manage.sdl","text":"Generate SDL aka GraphQL schema from ADFH file. Parameters: Name Type Description Default file str Path to ADFH file. required output str If --output is used, it will save it in file. <typer.models.OptionInfo object at 0x7f00cf3a86d0> Source code in ihsan/manage.py @app . command ( \"sdl\" ) def sdl ( file : str , output : str = typer . Option ( None , help = \"save output into a file.\" ), ) -> None : \"\"\"Generate SDL aka GraphQL schema from ADFH file. Args: file: Path to ADFH file. output: If --output is used, it will save it in file. \"\"\" console = Console () data = read_adfh_file ( file = file ) if type ( data ) == str : console . print ( data , style = \"bold red\" ) else : ihsan_type = IhsanType ( ** data ) # type: ignore sdl_output = to_sdl ( schema = ihsan_type ) if output : typer . confirm ( f \"The output will be saved in { output } , are you sure?\" , abort = True ) with open ( output , \"w\" ) as output_file : output_file . write ( sdl_output ) else : console . print ( sdl_output , style = \"bold green\" ) console . print ( \"Use -> https://app.graphqleditor.com/ to test the schema :)\" , style = \"bold blue\" , )","title":"sdl()"},{"location":"reference/manage/#ihsan.manage.version","text":"Show project Version. Source code in ihsan/manage.py @app . command () def version () -> None : \"\"\"Show project Version.\"\"\" console = Console () project_name = \"Ihsan\" console . print ( f \" { project_name } Version: { __version__ } \" , style = \"bold green\" )","title":"version()"},{"location":"reference/schema/","text":"Collection of schemas. ADFHActionsInputType pydantic-model Schema for ADFH action input. ADFHActionsType pydantic-model Schema for ADFH action. ADFHExtraType pydantic-model Schema for ADFH extra. ADFHFieldsType pydantic-model Schema for ADFH fields. ADFHModelsPropertiesType pydantic-model Schema for ADFH models properties. ADFHModelsType pydantic-model Schema for ADFH models. ADFHType pydantic-model Schema for ADFH. IhsanType pydantic-model Schema for Ihsan.","title":"Schema"},{"location":"reference/schema/#ihsan.schema","text":"Collection of schemas.","title":"ihsan.schema"},{"location":"reference/schema/#ihsan.schema.ADFHActionsInputType","text":"Schema for ADFH action input.","title":"ADFHActionsInputType"},{"location":"reference/schema/#ihsan.schema.ADFHActionsType","text":"Schema for ADFH action.","title":"ADFHActionsType"},{"location":"reference/schema/#ihsan.schema.ADFHExtraType","text":"Schema for ADFH extra.","title":"ADFHExtraType"},{"location":"reference/schema/#ihsan.schema.ADFHFieldsType","text":"Schema for ADFH fields.","title":"ADFHFieldsType"},{"location":"reference/schema/#ihsan.schema.ADFHModelsPropertiesType","text":"Schema for ADFH models properties.","title":"ADFHModelsPropertiesType"},{"location":"reference/schema/#ihsan.schema.ADFHModelsType","text":"Schema for ADFH models.","title":"ADFHModelsType"},{"location":"reference/schema/#ihsan.schema.ADFHType","text":"Schema for ADFH.","title":"ADFHType"},{"location":"reference/schema/#ihsan.schema.IhsanType","text":"Schema for Ihsan.","title":"IhsanType"},{"location":"reference/utils/","text":"Collection of utils. read_adfh_file ( file ) Parse an ADFH file into dict. Parameters: Name Type Description Default file str Path to ADFH file. required Returns: Type Description Union[MutableMapping[str, Any], str] Tuple either with the data or an error message. Source code in ihsan/utils.py def read_adfh_file ( file : str ) -> Union [ MutableMapping [ str , Any ], str ]: \"\"\"Parse an ADFH file into dict. Args: file: Path to ADFH file. Returns: Tuple either with the data or an error message. \"\"\" file_path = pathlib . Path ( file ) file_name , file_extension = file_path . name . rsplit ( \".\" ) if file_path . exists () and file_path . is_file (): if file_extension in [ \"yaml\" , \"yml\" ]: with open ( file_path , \"r\" ) as f : data = yaml . safe_load ( f ) return data elif file_extension == \"toml\" : data = toml . load ( f \" { file_path } \" ) return data else : return \"You can only pick toml or yaml file.\" else : return \"File doesn't exist.\"","title":"Utils"},{"location":"reference/utils/#ihsan.utils","text":"Collection of utils.","title":"ihsan.utils"},{"location":"reference/utils/#ihsan.utils.read_adfh_file","text":"Parse an ADFH file into dict. Parameters: Name Type Description Default file str Path to ADFH file. required Returns: Type Description Union[MutableMapping[str, Any], str] Tuple either with the data or an error message. Source code in ihsan/utils.py def read_adfh_file ( file : str ) -> Union [ MutableMapping [ str , Any ], str ]: \"\"\"Parse an ADFH file into dict. Args: file: Path to ADFH file. Returns: Tuple either with the data or an error message. \"\"\" file_path = pathlib . Path ( file ) file_name , file_extension = file_path . name . rsplit ( \".\" ) if file_path . exists () and file_path . is_file (): if file_extension in [ \"yaml\" , \"yml\" ]: with open ( file_path , \"r\" ) as f : data = yaml . safe_load ( f ) return data elif file_extension == \"toml\" : data = toml . load ( f \" { file_path } \" ) return data else : return \"You can only pick toml or yaml file.\" else : return \"File doesn't exist.\"","title":"read_adfh_file()"},{"location":"reference/sdl/core/","text":"Translator module where it change ADFH into SDL. to_sdl ( schema , indention = 4 ) Function that transfer ADFH into SDL aka GraphQL schema. Parameters: Name Type Description Default schema IhsanType IhsanType model. required indention int The indention of the generated SDL. 4 Returns: Type Description str SDL aka Graphql schema. Source code in ihsan/sdl/core.py def to_sdl ( schema : IhsanType , indention : int = 4 ) -> str : \"\"\"Function that transfer ADFH into SDL aka GraphQL schema. Args: schema: IhsanType model. indention: The indention of the generated SDL. Returns: SDL aka Graphql schema. \"\"\" text = \"\" choices = get_all_field_with_certain_type ( fields = schema . adfh . fields_list , keyword = \"choice\" ) if choices : for choice in choices : text += f \"enum { choice . name . capitalize () } Type { '{' } \\n \" if choice . options : for option in choice . options : placeholder = f \" { option . upper () } \\n \" text += placeholder . rjust ( len ( placeholder ) + indention ) text += \"} \\n \" for model in schema . adfh . models : text += f \"type { model . name } { '{' } \\n \" for pro in model . properties : new_pro = find_field ( fields = schema . adfh . fields_list , field_id = pro . assign ) placeholder = f \" { new_pro . name } : { new_pro . type }{ new_pro . mandatory } \\n \" text += placeholder . rjust ( len ( placeholder ) + indention ) text += \"} \\n \" if schema . adfh . actions : show_me_list = find_action ( actions = schema . adfh . actions , keyword = \"show me list\" ) show_me_certain_item = find_action ( actions = schema . adfh . actions , keyword = \"show me a certain item\" ) let_me_remove = find_action ( actions = schema . adfh . actions , keyword = \"let me remove\" ) let_me_add = find_action ( actions = schema . adfh . actions , keyword = \"let me add\" ) text += \"type Query { \\n \" for item in show_me_list : model = find_model ( models = schema . adfh . models , model_id = item . get ( \"model\" , \"\" ) ) placeholder = f \" { item . get ( 'name' ) } : [ { model . name } ] \\n \" text += placeholder . rjust ( len ( placeholder ) + indention ) for item in show_me_certain_item : placeholder = f \" { item . get ( 'name' ) } (\" text += placeholder . rjust ( len ( placeholder ) + indention ) field = find_field ( fields = schema . adfh . fields_list , field_id = item . get ( \"subject\" , \"\" ) ) text += f \" { field . name } : { field . type }{ field . mandatory } , \" model = find_model ( models = schema . adfh . models , model_id = item . get ( \"model\" , \"\" ) ) text += f \"): { model . name } \\n \" text += \"} \\n \" text += \"type Mutation { \\n \" for item in let_me_add : placeholder = f \" { item . get ( 'name' ) } (\" text += placeholder . rjust ( len ( placeholder ) + indention ) for input_action in item [ \"input\" ]: input_action = find_field ( fields = schema . adfh . fields_list , field_id = input_action . get ( \"assign\" ) ) text += f \" { input_action . name } : { input_action . type }{ input_action . mandatory } , \" # noqa B950 model = find_model ( models = schema . adfh . models , model_id = item . get ( \"model\" , \"\" ) ) text += f \"): { model . name } \\n \" for item in let_me_remove : placeholder = f \" { item . get ( 'name' ) } (\" text += placeholder . rjust ( len ( placeholder ) + indention ) field = find_field ( fields = schema . adfh . fields_list , field_id = item . get ( \"subject\" , \"\" ) ) text += f \" { field . name } : { field . type }{ field . mandatory } , \" model = find_model ( models = schema . adfh . models , model_id = item . get ( \"model\" , \"\" ) ) text += f \"): { model . name } \\n \" text += \"} \\n \" text += \"\"\"schema { query: Query, mutation: Mutation } \"\"\" return text","title":"Core"},{"location":"reference/sdl/core/#ihsan.sdl.core","text":"Translator module where it change ADFH into SDL.","title":"ihsan.sdl.core"},{"location":"reference/sdl/core/#ihsan.sdl.core.to_sdl","text":"Function that transfer ADFH into SDL aka GraphQL schema. Parameters: Name Type Description Default schema IhsanType IhsanType model. required indention int The indention of the generated SDL. 4 Returns: Type Description str SDL aka Graphql schema. Source code in ihsan/sdl/core.py def to_sdl ( schema : IhsanType , indention : int = 4 ) -> str : \"\"\"Function that transfer ADFH into SDL aka GraphQL schema. Args: schema: IhsanType model. indention: The indention of the generated SDL. Returns: SDL aka Graphql schema. \"\"\" text = \"\" choices = get_all_field_with_certain_type ( fields = schema . adfh . fields_list , keyword = \"choice\" ) if choices : for choice in choices : text += f \"enum { choice . name . capitalize () } Type { '{' } \\n \" if choice . options : for option in choice . options : placeholder = f \" { option . upper () } \\n \" text += placeholder . rjust ( len ( placeholder ) + indention ) text += \"} \\n \" for model in schema . adfh . models : text += f \"type { model . name } { '{' } \\n \" for pro in model . properties : new_pro = find_field ( fields = schema . adfh . fields_list , field_id = pro . assign ) placeholder = f \" { new_pro . name } : { new_pro . type }{ new_pro . mandatory } \\n \" text += placeholder . rjust ( len ( placeholder ) + indention ) text += \"} \\n \" if schema . adfh . actions : show_me_list = find_action ( actions = schema . adfh . actions , keyword = \"show me list\" ) show_me_certain_item = find_action ( actions = schema . adfh . actions , keyword = \"show me a certain item\" ) let_me_remove = find_action ( actions = schema . adfh . actions , keyword = \"let me remove\" ) let_me_add = find_action ( actions = schema . adfh . actions , keyword = \"let me add\" ) text += \"type Query { \\n \" for item in show_me_list : model = find_model ( models = schema . adfh . models , model_id = item . get ( \"model\" , \"\" ) ) placeholder = f \" { item . get ( 'name' ) } : [ { model . name } ] \\n \" text += placeholder . rjust ( len ( placeholder ) + indention ) for item in show_me_certain_item : placeholder = f \" { item . get ( 'name' ) } (\" text += placeholder . rjust ( len ( placeholder ) + indention ) field = find_field ( fields = schema . adfh . fields_list , field_id = item . get ( \"subject\" , \"\" ) ) text += f \" { field . name } : { field . type }{ field . mandatory } , \" model = find_model ( models = schema . adfh . models , model_id = item . get ( \"model\" , \"\" ) ) text += f \"): { model . name } \\n \" text += \"} \\n \" text += \"type Mutation { \\n \" for item in let_me_add : placeholder = f \" { item . get ( 'name' ) } (\" text += placeholder . rjust ( len ( placeholder ) + indention ) for input_action in item [ \"input\" ]: input_action = find_field ( fields = schema . adfh . fields_list , field_id = input_action . get ( \"assign\" ) ) text += f \" { input_action . name } : { input_action . type }{ input_action . mandatory } , \" # noqa B950 model = find_model ( models = schema . adfh . models , model_id = item . get ( \"model\" , \"\" ) ) text += f \"): { model . name } \\n \" for item in let_me_remove : placeholder = f \" { item . get ( 'name' ) } (\" text += placeholder . rjust ( len ( placeholder ) + indention ) field = find_field ( fields = schema . adfh . fields_list , field_id = item . get ( \"subject\" , \"\" ) ) text += f \" { field . name } : { field . type }{ field . mandatory } , \" model = find_model ( models = schema . adfh . models , model_id = item . get ( \"model\" , \"\" ) ) text += f \"): { model . name } \\n \" text += \"} \\n \" text += \"\"\"schema { query: Query, mutation: Mutation } \"\"\" return text","title":"to_sdl()"},{"location":"reference/sdl/utils/","text":"Collection of utils for SDL. find_action ( * , actions , keyword ) Search for a certain action. Parameters: Name Type Description Default actions List[ihsan.schema.ADFHActionsType] List of ADFHActionsType model. required keyword str word or the action that has been required. required Returns: Type Description List[Dict[str, Any]] List of selected actions. Source code in ihsan/sdl/utils.py def find_action ( * , actions : List [ ADFHActionsType ], keyword : str ) -> List [ Dict [ str , Any ]]: \"\"\"Search for a certain action. Args: actions: List of ADFHActionsType model. keyword: word or the action that has been required. Returns: List of selected actions. \"\"\" return [ action . dict () for action in actions if action . type == keyword ] find_field ( * , fields , field_id ) Search for a certain field. Parameters: Name Type Description Default fields List[ihsan.schema.ADFHFieldsType] List of ADFHFieldsType model. required field_id str The id of the field. required Returns: Type Description ADFHFieldsType ADFHFieldsType model. Source code in ihsan/sdl/utils.py def find_field ( * , fields : List [ ADFHFieldsType ], field_id : str ) -> ADFHFieldsType : \"\"\"Search for a certain field. Args: fields: List of ADFHFieldsType model. field_id: The id of the field. Returns: ADFHFieldsType model. \"\"\" field_dict = {} for field in fields : if field . id == field_id : if field . type == \"choice\" : data_type = f \" { field . name . capitalize () } Type\" else : data_type = sdl_data_type_converter ( data = field . type ) field_dict . update ( { \"id\" : field . id , \"name\" : field . name , \"type\" : data_type , \"mandatory\" : \"!\" if field . mandatory == \"yes\" else \"\" , } ) return ADFHFieldsType ( ** field_dict ) find_model ( * , models , model_id ) Search for a certain model. Parameters: Name Type Description Default models List[ihsan.schema.ADFHModelsType] List of ADFHModelsType model. required model_id str The id of the model. required Returns: Type Description ADFHModelsType ADFHModelsType model. Source code in ihsan/sdl/utils.py def find_model ( * , models : List [ ADFHModelsType ], model_id : str ) -> ADFHModelsType : \"\"\"Search for a certain model. Args: models: List of ADFHModelsType model. model_id: The id of the model. Returns: ADFHModelsType model. \"\"\" model_dict = {} properties_list = [] for field in models : if field . id == model_id : model_dict . update ({ \"id\" : field . id , \"name\" : field . name }) for pro in field . properties : properties_list . append ( pro . dict ()) model_dict . update ({ \"properties\" : properties_list }) # type: ignore return ADFHModelsType ( ** model_dict ) get_all_field_with_certain_type ( * , fields , keyword ) Get all field with a certain type. Parameters: Name Type Description Default fields List[ihsan.schema.ADFHFieldsType] List of ADFHFieldsType model. required keyword str word or the type that has been required. required Returns: Type Description List[ihsan.schema.ADFHFieldsType] List of selected fields. Source code in ihsan/sdl/utils.py def get_all_field_with_certain_type ( * , fields : List [ ADFHFieldsType ], keyword : str ) -> List [ ADFHFieldsType ]: \"\"\"Get all field with a certain type. Args: fields: List of ADFHFieldsType model. keyword: word or the type that has been required. Returns: List of selected fields. \"\"\" return [ ADFHFieldsType ( ** field . dict ()) for field in fields if field . type == keyword ] sdl_data_type_converter ( * , data ) Converting ADFH data type into sdl data type. Parameters: Name Type Description Default data str ADFH data type. required Examples: >>> from ihsan.sdl.utils import sdl_data_type_converter >>> unique_id = sdl_data_type_converter ( data = \"unique id\" ) >>> unique_id == \"String\" True >>> text = sdl_data_type_converter ( data = \"text\" ) >>> text == \"String\" True >>> checkbox = sdl_data_type_converter ( data = \"checkbox\" ) >>> checkbox == \"Boolean\" True >>> number = sdl_data_type_converter ( data = \"number\" ) >>> number == \"Int\" True Returns: Type Description str SDL data type. Source code in ihsan/sdl/utils.py def sdl_data_type_converter ( * , data : str ) -> str : \"\"\"Converting ADFH data type into sdl data type. Args: data: ADFH data type. Examples: >>> from ihsan.sdl.utils import sdl_data_type_converter >>> unique_id = sdl_data_type_converter(data=\"unique id\") >>> unique_id == \"String\" True >>> text = sdl_data_type_converter(data=\"text\") >>> text == \"String\" True >>> checkbox = sdl_data_type_converter(data=\"checkbox\") >>> checkbox == \"Boolean\" True >>> number = sdl_data_type_converter(data=\"number\") >>> number == \"Int\" True Returns: SDL data type. \"\"\" types = { \"unique id\" : \"String\" , \"text\" : \"String\" , \"checkbox\" : \"Boolean\" , \"number\" : \"Int\" , } return types . get ( data , \"String\" )","title":"Utils"},{"location":"reference/sdl/utils/#ihsan.sdl.utils","text":"Collection of utils for SDL.","title":"ihsan.sdl.utils"},{"location":"reference/sdl/utils/#ihsan.sdl.utils.find_action","text":"Search for a certain action. Parameters: Name Type Description Default actions List[ihsan.schema.ADFHActionsType] List of ADFHActionsType model. required keyword str word or the action that has been required. required Returns: Type Description List[Dict[str, Any]] List of selected actions. Source code in ihsan/sdl/utils.py def find_action ( * , actions : List [ ADFHActionsType ], keyword : str ) -> List [ Dict [ str , Any ]]: \"\"\"Search for a certain action. Args: actions: List of ADFHActionsType model. keyword: word or the action that has been required. Returns: List of selected actions. \"\"\" return [ action . dict () for action in actions if action . type == keyword ]","title":"find_action()"},{"location":"reference/sdl/utils/#ihsan.sdl.utils.find_field","text":"Search for a certain field. Parameters: Name Type Description Default fields List[ihsan.schema.ADFHFieldsType] List of ADFHFieldsType model. required field_id str The id of the field. required Returns: Type Description ADFHFieldsType ADFHFieldsType model. Source code in ihsan/sdl/utils.py def find_field ( * , fields : List [ ADFHFieldsType ], field_id : str ) -> ADFHFieldsType : \"\"\"Search for a certain field. Args: fields: List of ADFHFieldsType model. field_id: The id of the field. Returns: ADFHFieldsType model. \"\"\" field_dict = {} for field in fields : if field . id == field_id : if field . type == \"choice\" : data_type = f \" { field . name . capitalize () } Type\" else : data_type = sdl_data_type_converter ( data = field . type ) field_dict . update ( { \"id\" : field . id , \"name\" : field . name , \"type\" : data_type , \"mandatory\" : \"!\" if field . mandatory == \"yes\" else \"\" , } ) return ADFHFieldsType ( ** field_dict )","title":"find_field()"},{"location":"reference/sdl/utils/#ihsan.sdl.utils.find_model","text":"Search for a certain model. Parameters: Name Type Description Default models List[ihsan.schema.ADFHModelsType] List of ADFHModelsType model. required model_id str The id of the model. required Returns: Type Description ADFHModelsType ADFHModelsType model. Source code in ihsan/sdl/utils.py def find_model ( * , models : List [ ADFHModelsType ], model_id : str ) -> ADFHModelsType : \"\"\"Search for a certain model. Args: models: List of ADFHModelsType model. model_id: The id of the model. Returns: ADFHModelsType model. \"\"\" model_dict = {} properties_list = [] for field in models : if field . id == model_id : model_dict . update ({ \"id\" : field . id , \"name\" : field . name }) for pro in field . properties : properties_list . append ( pro . dict ()) model_dict . update ({ \"properties\" : properties_list }) # type: ignore return ADFHModelsType ( ** model_dict )","title":"find_model()"},{"location":"reference/sdl/utils/#ihsan.sdl.utils.get_all_field_with_certain_type","text":"Get all field with a certain type. Parameters: Name Type Description Default fields List[ihsan.schema.ADFHFieldsType] List of ADFHFieldsType model. required keyword str word or the type that has been required. required Returns: Type Description List[ihsan.schema.ADFHFieldsType] List of selected fields. Source code in ihsan/sdl/utils.py def get_all_field_with_certain_type ( * , fields : List [ ADFHFieldsType ], keyword : str ) -> List [ ADFHFieldsType ]: \"\"\"Get all field with a certain type. Args: fields: List of ADFHFieldsType model. keyword: word or the type that has been required. Returns: List of selected fields. \"\"\" return [ ADFHFieldsType ( ** field . dict ()) for field in fields if field . type == keyword ]","title":"get_all_field_with_certain_type()"},{"location":"reference/sdl/utils/#ihsan.sdl.utils.sdl_data_type_converter","text":"Converting ADFH data type into sdl data type. Parameters: Name Type Description Default data str ADFH data type. required Examples: >>> from ihsan.sdl.utils import sdl_data_type_converter >>> unique_id = sdl_data_type_converter ( data = \"unique id\" ) >>> unique_id == \"String\" True >>> text = sdl_data_type_converter ( data = \"text\" ) >>> text == \"String\" True >>> checkbox = sdl_data_type_converter ( data = \"checkbox\" ) >>> checkbox == \"Boolean\" True >>> number = sdl_data_type_converter ( data = \"number\" ) >>> number == \"Int\" True Returns: Type Description str SDL data type. Source code in ihsan/sdl/utils.py def sdl_data_type_converter ( * , data : str ) -> str : \"\"\"Converting ADFH data type into sdl data type. Args: data: ADFH data type. Examples: >>> from ihsan.sdl.utils import sdl_data_type_converter >>> unique_id = sdl_data_type_converter(data=\"unique id\") >>> unique_id == \"String\" True >>> text = sdl_data_type_converter(data=\"text\") >>> text == \"String\" True >>> checkbox = sdl_data_type_converter(data=\"checkbox\") >>> checkbox == \"Boolean\" True >>> number = sdl_data_type_converter(data=\"number\") >>> number == \"Int\" True Returns: SDL data type. \"\"\" types = { \"unique id\" : \"String\" , \"text\" : \"String\" , \"checkbox\" : \"Boolean\" , \"number\" : \"Int\" , } return types . get ( data , \"String\" )","title":"sdl_data_type_converter()"}]}